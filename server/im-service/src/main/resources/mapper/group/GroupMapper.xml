<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.kt.mall.im.group.mapper.GroupDAO">

    <cache type="cn.kt.mall.common.cache.MybatisRedisCache"/>


    <select id="getGroupChat" resultType="cn.kt.mall.im.group.entity.GroupChatEntity">
        <!--SELECT * FROM tb_im_group_chat WHERE id=#{groupId}-->
        SELECT
           t1.id,
           t1.name,
           t1.`master`,
           t1.avatar,
           t1.board,
           t1.creator,
           t2.nickname,
           t2.isManager
      FROM tb_im_group_chat t1
      inner join
           tb_im_group_member t2
        on t1.id = t2.groupId
       and t2.userId = #{userId}
     WHERE t1.id = #{groupId}
    </select>

    <update id="fixGroupChat">
        UPDATE tb_im_group_chat
        <set>
            <if test="name != null and name != ''">
                name = #{name},
            </if>
            <if test="board != null">
                board = #{board},
            </if>
            <if test="master != null and master != ''">
                master=#{master},
            </if>
        </set>
        <where>
            id = #{groupId}
        </where>
    </update>

    <select id="getMyGroupChatCount" parameterType="string" resultType="int">
        SELECT count(1) as cnt FROM tb_im_group_member WHERE userId=#{userId}
    </select>

    <select id="getMyGroupChat" resultType="cn.kt.mall.im.group.entity.GroupChatEntity">
        SELECT t2.* FROM tb_im_group_member t1
        LEFT JOIN tb_im_group_chat t2 ON t1.`groupId` = t2.`id`
        WHERE t1.`userId` = #{userId} GROUP BY t1.groupId
        ORDER BY t2.name ASC limit #{offset}, #{pageSize}
    </select>

    <select id="isGroupMember" parameterType="string" resultType="boolean">
        SELECT IF(count(1) = 0, false, true) as isGroupMember from tb_im_group_member where userId = #{userId} and groupId = #{groupId}
    </select>

    <insert id="addGroupChat" parameterType="cn.kt.mall.im.group.entity.GroupChatEntity" flushCache="true">
        INSERT INTO tb_im_group_chat(
         id,
         name,
         master,
         creator,
         status,
         createTime)
        VALUES
        (#{id},
         #{name},
         #{master},
         #{creator},
         '0',
         NOW())
    </insert>

    <insert id="addGroupMember" parameterType="cn.kt.mall.im.group.entity.GroupMemberEntity" flushCache="true">
        INSERT INTO tb_im_group_member(id, groupId, userId, nickname, isManager, creator, createTime)
        VALUES
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.id},#{item.groupId},#{item.userId},#{item.nickname},#{item.isManager},#{item.creator}, NOW())
        </foreach>
    </insert>

    <select id="isGroupChat" parameterType="string" resultType="boolean">
        SELECT IF(count(1)=0, false, true) as isGroupChat from tb_im_group_chat where groupId=#{groupId}
    </select>

    <insert id="addGroupApply" parameterType="cn.kt.mall.im.group.entity.GroupApplyEntity" flushCache="true">
        INSERT INTO tb_im_group_apply(id, groupId, message, status, creator, createTime)
        VALUES (#{id},#{groupId},#{message}, '0', #{creator}, NOW())
    </insert>

    <select id="getMyGroupApplyEntityCount" parameterType="string" resultType="int">
        SELECT count(1) as cnt FROM tb_im_group_apply WHERE groupId=#{groupId} AND status='0'
    </select>

    <select id="getMyGroupApplyEntity" parameterType="string" resultType="cn.kt.mall.im.group.entity.GroupApplyEntity">
        SELECT * FROM tb_im_group_apply WHERE groupId=#{groupId} AND status='0'
    </select>

    <select id="getGroupApplyById" parameterType="string" resultType="cn.kt.mall.im.group.entity.GroupApplyEntity">
        SELECT * FROM tb_im_group_apply WHERE  id=#{id}
    </select>

    <update id="confirmGroupApplyById" parameterType="string" flushCache="true">
        UPDATE tb_im_group_apply SET status=#{status} WHERE id=#{id}
    </update>

    <select id="getGroupChatMembers" parameterType="string" resultType="string">
        SELECT userId FROM tb_im_group_member WHERE groupId=#{groupId} ORDER BY createTime ASC
    </select>

    <select id="getGroupChatManager" parameterType="string" resultType="string">
        SELECT userId FROM tb_im_group_member WHERE groupId=#{groupId} AND isManager='1' LIMIT 0,1
    </select>

    <update id="setGroupChatManager" parameterType="string" flushCache="true">
        UPDATE tb_im_group_member SET isManager='1' WHERE groupId=#{groupId}
        AND userId IN (
            SELECT userId FROM tb_im_group_member WHERE groupId=#{groupId} ORDER by createTime ASC limit 0,1
        )
    </update>

    <delete id="delGroupMember" parameterType="string" flushCache="true">
        DELETE FROM tb_im_group_member WHERE userId = #{userId} AND groupId=#{groupId}

    </delete>

    <delete id="delGroup" parameterType="string" flushCache="true">
        DELETE FROM tb_im_group_member WHERE groupId=#{groupId}
    </delete>

    <update id="disGroupChat" parameterType="string" flushCache="true">
        UPDATE tb_im_group_chat SET status = '1' WHERE id=#{groupId};
    </update>

    <delete id="removeGroupChat" parameterType="string" flushCache="true">
        DELETE FROM tb_im_group_chat WHERE id=#{groupId}
    </delete>

    <select id="checkGroupManage" resultType="int">
       select
          count(1)
      from
          tb_im_group_member t
      where
          groupId = #{groupId}
      and
          userId = #{userId}
      and
          isManager ='1'
    </select>

    <!--删除成员-->
    <delete id="delGroupMembers">
         delete from tb_im_group_member
         where groupId = #{groupId}
         <if test="userIds != null and userIds.length > 0">
            AND userId IN
            <foreach item="item" index="index" collection="userIds" open="(" separator="," close=")">
                #{item}
            </foreach>
         </if>
    </delete>

    <!--更新群成员的昵称-->
    <update id="updateNick">
        update tb_im_group_member t set nickname = #{nickname} where groupId = #{groupId} and userId = #{userId}
    </update>

    <!--权限过度-->
    <update id="overAuthority">
       update tb_im_group_member  set isManager = #{isManager} where groupId = #{groupId} and userId = #{userId}
    </update>
    
    <select id="getGroupChatMember" resultType="cn.kt.mall.im.group.entity.GroupMemberEntity">
    	select * from tb_im_group_member where groupId = #{groupId} and userId = #{userId} limit 0,1
    </select>

    <!--根据群id查询群信息-->
    <select id="getGroupInfo" resultType="cn.kt.mall.im.group.entity.GroupChatEntity">
        select * from tb_im_group_chat where id = #{id}
    </select>
    
</mapper>